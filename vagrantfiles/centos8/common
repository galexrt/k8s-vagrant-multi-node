$box_image = ENV['BOX_IMAGE'].to_s.strip.empty? ? 'centos/8'.freeze : ENV['BOX_IMAGE']

# Stop and disable firewalld service
$osPrepareScript = <<SCRIPT
set -x

if [ -n "#{HTTP_PROXY}" ]; then
    cat <<EOF >> /etc/yum.conf
proxy=#{HTTP_PROXY}
proxy_username=#{HTTP_PROXY_USERNAME}
proxy_password=#{HTTP_PROXY_PASSWORD}
EOF
fi

systemctl stop firewalld || true
systemctl disable firewalld || true
systemctl mask firewalld || true

retries=5
for ((i=1; i<=retries; i++)); do
    yum update -y && \
        break
    [[ $retries -eq i ]] && { echo "Failed to update OS packages after 5 tries"; exit 1; }
done

if [ -n '#{INSTALL_ADDITIONAL_PACKAGES}' ]; then
    yum clean packages
    retries=5
    for ((i=1; i<=retries; i++)); do
        yum -y install #{INSTALL_ADDITIONAL_PACKAGES} && \
            break
        [[ $retries -eq i ]] && { echo "Failed to install additional packages (#{INSTALL_ADDITIONAL_PACKAGES}) after 5 tries"; exit 1; }
    done
fi
SCRIPT

$containerRuntimeInstallScript = <<SCRIPT
set -x

retries=5
for ((i=1; i<=retries; i++)); do
    yum install -y yum-utils \
        lvm2 iproute-tc
    yum install -y libseccomp
    yum-config-manager \
        --add-repo \
        https://download.docker.com/linux/centos/docker-ce.repo
    yum install -y container-selinux
    yum install -y docker-ce docker-ce-cli containerd.io && \
        break

    [[ $retries -eq i ]] && { echo "Failed to install docker-ce after 5 tries"; exit 1; }
done
SCRIPT

# Enforce Calico as canal is "broken" (inter node connectivity not working)
# under CentOS 8 as of 10. June 2020
if $kube_network != 'none'
    $kube_network = 'calico'
end

if $kube_network == 'calico'
    # Fixup Calico to use nftables
    # See https://github.com/rancher/rke/issues/1788#issuecomment-565536201
    $kubeMasterPostScript = <<SCRIPT
set -x
kubectl -n kube-system set env ds/calico-node FELIX_IPTABLESBACKEND=NFT
SCRIPT
end

$postInstallScript = <<SCRIPT
set -x

cat << 'EOF' > /etc/systemd/system/iptables-forward-accept.service
[Unit]
After=network.target docker.service
Before=kubelet.service

[Service]
Type=oneshot
ExecStart=/usr/sbin/iptables -P FORWARD ACCEPT
TimeoutStartSec=0

[Install]
WantedBy=multi-user.target
EOF
systemctl daemon-reload
systemctl enable iptables-forward-accept.service
systemctl start iptables-forward-accept.service
SCRIPT
